Task 2: Basic CRUD Operations
1. Find all books in a specific genre (e.g., Fiction):
db.books.find({ genre: "Fiction" })
2. Find books published after a certain year (e.g., after 2000):
db.books.find({ published_year: { $gt: 2000 } })
3. Find books by a specific author (e.g., George Orwell):
db.books.find({ author: "George Orwell" })
4. Update the price of a specific book (e.g., "1984")
db.books.updateOne(
{ title: "1984" },
{ $set: { price: 13.99 } }
)
5. Delete a book by its title (e.g., "Moby Dick")
db.books.deleteOne({ title: "Moby Dick" })
---
Task 3: Advanced Queries
1. Find books that are in stock and published after 2010:
db.books.find({ in_stock: true, published_year: { $gt: 2010 } })
2. Projection (show only title, author, price):
db.books.find({}, { title: 1, author: 1, price: 1, _id: 0 })
3. Sorting by price:
- Ascending:
db.books.find().sort({ price: 1 })
- Descending:
db.books.find().sort({ price: -1 })
4. Pagination (5 books per page):
- Page 1:
db.books.find().limit(5)
- Page 2:
db.books.find().skip(5).limit(5)
---
Task 4: Aggregation Pipeline
1. Average price of books by genre:
db.books.aggregate([
{ $group: { _id: "$genre", avgPrice: { $avg: "$price" } } }
])
2. Author with the most books:
db.books.aggregate([
{ $group: { _id: "$author", bookCount: { $sum: 1 } } },
{ $sort: { bookCount: -1 } },
{ $limit: 1 }
])
3. Group books by publication decade:
db.books.aggregate([
{
$group: {
_id: { $floor: { $divide: ["$published_year", 10] } },
count: { $sum: 1 }
}
},
{
$project: {
decade: { $concat: [{ $toString: { $multiply: ["$_id", 10] } }, "s"] },
count: 1,
_id: 0
}
},
{ $sort: { decade: 1 } }
])
---
Task 5: Indexing
1. Create index on title field:
db.books.createIndex({ title: 1 })
2. Create compound index on author and published_year:
db.books.createIndex({ author: 1, published_year: 1 })
3. Use explain() to show performance improvements:
db.books.find({ title: "1984" }).explain("executionStats")
